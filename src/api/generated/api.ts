/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CompileMapRequest
 */
export interface CompileMapRequest {
    /**
     * 
     * @type {FrogDataDTO}
     * @memberof CompileMapRequest
     */
    'frogData'?: FrogDataDTO;
    /**
     * 
     * @type {string}
     * @memberof CompileMapRequest
     */
    'mapId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompileMapRequest
     */
    'map': string;
    /**
     * 
     * @type {string}
     * @memberof CompileMapRequest
     */
    'rowDelimiter'?: string;
}
/**
 * 
 * @export
 * @interface CompileMapResponse
 */
export interface CompileMapResponse {
    /**
     * 
     * @type {string}
     * @memberof CompileMapResponse
     */
    'mapID': string;
}
/**
 * 
 * @export
 * @interface CompileScriptRequest
 */
export interface CompileScriptRequest {
    /**
     * 
     * @type {string}
     * @memberof CompileScriptRequest
     */
    'mapID': string;
    /**
     * 
     * @type {string}
     * @memberof CompileScriptRequest
     */
    'script': string;
}
/**
 * 
 * @export
 * @interface Coordinate
 */
export interface Coordinate {
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'x'?: number;
}
/**
 * 
 * @export
 * @interface FrogDataDTO
 */
export interface FrogDataDTO {
    /**
     * 
     * @type {Coordinate}
     * @memberof FrogDataDTO
     */
    'frogPosition'?: Coordinate;
    /**
     * 
     * @type {string}
     * @memberof FrogDataDTO
     */
    'initialDirection': FrogDataDTOInitialDirectionEnum;
}

export const FrogDataDTOInitialDirectionEnum = {
    North: 'NORTH',
    South: 'SOUTH',
    West: 'WEST',
    East: 'EAST'
} as const;

export type FrogDataDTOInitialDirectionEnum = typeof FrogDataDTOInitialDirectionEnum[keyof typeof FrogDataDTOInitialDirectionEnum];

/**
 * 
 * @export
 * @interface MapEditorDrawRequest
 */
export interface MapEditorDrawRequest {
    /**
     * 
     * @type {Coordinate}
     * @memberof MapEditorDrawRequest
     */
    'pos': Coordinate;
    /**
     * 
     * @type {TileType}
     * @memberof MapEditorDrawRequest
     */
    'type': TileType;
}


/**
 * 
 * @export
 * @interface MapEditorResponse
 */
export interface MapEditorResponse {
    /**
     * 
     * @type {string}
     * @memberof MapEditorResponse
     */
    'mapID': string;
    /**
     * 
     * @type {string}
     * @memberof MapEditorResponse
     */
    'map': string;
}
/**
 * 
 * @export
 * @interface MethodCall
 */
export interface MethodCall {
    /**
     * 
     * @type {string}
     * @memberof MethodCall
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodCall
     */
    'result'?: string;
}
/**
 * 
 * @export
 * @interface ScriptResult
 */
export interface ScriptResult {
    /**
     * 
     * @type {Array<MethodCall>}
     * @memberof ScriptResult
     */
    'callStack': Array<MethodCall>;
    /**
     * 
     * @type {string}
     * @memberof ScriptResult
     */
    'exception'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TileType = {
    Wall: 'WALL',
    Floor: 'FLOOR',
    Void: 'VOID'
} as const;

export type TileType = typeof TileType[keyof typeof TileType];



/**
 * GamecontrollerApi - axios parameter creator
 * @export
 */
export const GamecontrollerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CompileMapRequest} compileMapRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compileMap: async (compileMapRequest: CompileMapRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compileMapRequest' is not null or undefined
            assertParamExists('compileMap', 'compileMapRequest', compileMapRequest)
            const localVarPath = `/game/compileMap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(compileMapRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompileScriptRequest} compileScriptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compileScript: async (compileScriptRequest: CompileScriptRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compileScriptRequest' is not null or undefined
            assertParamExists('compileScript', 'compileScriptRequest', compileScriptRequest)
            const localVarPath = `/game/compileScript`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(compileScriptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeScript: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('executeScript', 'body', body)
            const localVarPath = `/game/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamecontrollerApi - functional programming interface
 * @export
 */
export const GamecontrollerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamecontrollerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CompileMapRequest} compileMapRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compileMap(compileMapRequest: CompileMapRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompileMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compileMap(compileMapRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GamecontrollerApi.compileMap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CompileScriptRequest} compileScriptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compileScript(compileScriptRequest: CompileScriptRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompileMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compileScript(compileScriptRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GamecontrollerApi.compileScript']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeScript(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScriptResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeScript(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GamecontrollerApi.executeScript']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GamecontrollerApi - factory interface
 * @export
 */
export const GamecontrollerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamecontrollerApiFp(configuration)
    return {
        /**
         * 
         * @param {CompileMapRequest} compileMapRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compileMap(compileMapRequest: CompileMapRequest, options?: any): AxiosPromise<CompileMapResponse> {
            return localVarFp.compileMap(compileMapRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompileScriptRequest} compileScriptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compileScript(compileScriptRequest: CompileScriptRequest, options?: any): AxiosPromise<CompileMapResponse> {
            return localVarFp.compileScript(compileScriptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeScript(body: string, options?: any): AxiosPromise<ScriptResult> {
            return localVarFp.executeScript(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamecontrollerApi - object-oriented interface
 * @export
 * @class GamecontrollerApi
 * @extends {BaseAPI}
 */
export class GamecontrollerApi extends BaseAPI {
    /**
     * 
     * @param {CompileMapRequest} compileMapRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamecontrollerApi
     */
    public compileMap(compileMapRequest: CompileMapRequest, options?: RawAxiosRequestConfig) {
        return GamecontrollerApiFp(this.configuration).compileMap(compileMapRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompileScriptRequest} compileScriptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamecontrollerApi
     */
    public compileScript(compileScriptRequest: CompileScriptRequest, options?: RawAxiosRequestConfig) {
        return GamecontrollerApiFp(this.configuration).compileScript(compileScriptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamecontrollerApi
     */
    public executeScript(body: string, options?: RawAxiosRequestConfig) {
        return GamecontrollerApiFp(this.configuration).executeScript(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MapEditorControllerApi - axios parameter creator
 * @export
 */
export const MapEditorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [initialWidth] 
         * @param {number} [initialHeight] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmptyMap: async (initialWidth?: number, initialHeight?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/editor/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (initialWidth !== undefined) {
                localVarQueryParameter['initialWidth'] = initialWidth;
            }

            if (initialHeight !== undefined) {
                localVarQueryParameter['initialHeight'] = initialHeight;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} editorID 
         * @param {Array<MapEditorDrawRequest>} mapEditorDrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        draw: async (editorID: string, mapEditorDrawRequest: Array<MapEditorDrawRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editorID' is not null or undefined
            assertParamExists('draw', 'editorID', editorID)
            // verify required parameter 'mapEditorDrawRequest' is not null or undefined
            assertParamExists('draw', 'mapEditorDrawRequest', mapEditorDrawRequest)
            const localVarPath = `/editor/draw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (editorID !== undefined) {
                localVarQueryParameter['editorID'] = editorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapEditorDrawRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MapEditorControllerApi - functional programming interface
 * @export
 */
export const MapEditorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MapEditorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [initialWidth] 
         * @param {number} [initialHeight] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmptyMap(initialWidth?: number, initialHeight?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapEditorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmptyMap(initialWidth, initialHeight, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MapEditorControllerApi.createEmptyMap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} editorID 
         * @param {Array<MapEditorDrawRequest>} mapEditorDrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async draw(editorID: string, mapEditorDrawRequest: Array<MapEditorDrawRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapEditorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.draw(editorID, mapEditorDrawRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MapEditorControllerApi.draw']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MapEditorControllerApi - factory interface
 * @export
 */
export const MapEditorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MapEditorControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [initialWidth] 
         * @param {number} [initialHeight] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmptyMap(initialWidth?: number, initialHeight?: number, options?: any): AxiosPromise<MapEditorResponse> {
            return localVarFp.createEmptyMap(initialWidth, initialHeight, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} editorID 
         * @param {Array<MapEditorDrawRequest>} mapEditorDrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        draw(editorID: string, mapEditorDrawRequest: Array<MapEditorDrawRequest>, options?: any): AxiosPromise<MapEditorResponse> {
            return localVarFp.draw(editorID, mapEditorDrawRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MapEditorControllerApi - object-oriented interface
 * @export
 * @class MapEditorControllerApi
 * @extends {BaseAPI}
 */
export class MapEditorControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [initialWidth] 
     * @param {number} [initialHeight] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapEditorControllerApi
     */
    public createEmptyMap(initialWidth?: number, initialHeight?: number, options?: RawAxiosRequestConfig) {
        return MapEditorControllerApiFp(this.configuration).createEmptyMap(initialWidth, initialHeight, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} editorID 
     * @param {Array<MapEditorDrawRequest>} mapEditorDrawRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapEditorControllerApi
     */
    public draw(editorID: string, mapEditorDrawRequest: Array<MapEditorDrawRequest>, options?: RawAxiosRequestConfig) {
        return MapEditorControllerApiFp(this.configuration).draw(editorID, mapEditorDrawRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



